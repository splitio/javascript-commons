import { ISplitFiltersValidation } from './dtos/types';
import { IIntegration, IIntegrationFactoryParams } from './integrations/types';
import { ILogger } from './logger/types';
import { ISdkFactoryContext } from './sdkFactory/types';
/* eslint-disable no-use-before-define */

import { IStorageFactoryParams, IStorageSync, IStorageAsync, IStorageSyncFactory, IStorageAsyncFactory } from './storages/types';
import { ISyncManagerCS } from './sync/types';

/**
 * Reduced version of NodeJS.EventEmitter interface with the minimal methods used by the SDK
 * @see {@link https://nodejs.org/api/events.html}
 */
export interface IEventEmitter {
  addListener(event: string, listener: (...args: any[]) => void): this;
  on(event: string, listener: (...args: any[]) => void): this
  once(event: string, listener: (...args: any[]) => void): this
  removeListener(event: string, listener: (...args: any[]) => void): this;
  off(event: string, listener: (...args: any[]) => void): this;
  removeAllListeners(event?: string): this
  emit(event: string, ...args: any[]): boolean
}

/**
 * impression DTO generated by the Sdk client when processing evaluations
 */
export type ImpressionDTO = {
  feature: string,
  keyName: string,
  treatment: string,
  time: number,
  bucketingKey?: string,
  label: string,
  changeNumber: number,
  pt?: number,
}

/** splitio.d.ts */

/**
 * @typedef {Object} EventConsts
 * @property {string} SDK_READY The ready event.
 * @property {string} SDK_READY_FROM_CACHE The ready event when fired with cached data.
 * @property {string} SDK_READY_TIMED_OUT The timeout event.
 * @property {string} SDK_UPDATE The update event.
 */
type EventConsts = {
  SDK_READY: 'init::ready',
  SDK_READY_FROM_CACHE: 'init::cache-ready',
  SDK_READY_TIMED_OUT: 'init::timeout',
  SDK_UPDATE: 'state::update'
};
/**
 * SDK Modes.
 * @typedef {string} SDKMode
 */
export type SDKMode = 'standalone' | 'consumer' | 'localhost' | 'consumer_partial';
/**
 * User consent status.
 * @typedef {string} ConsentStatus
 */
export type ConsentStatus = 'GRANTED' | 'DECLINED' | 'UNKNOWN';
/**
 * Settings interface. This is a representation of the settings the SDK expose, that's why
 * most of it's props are readonly. Only features should be rewritten when localhost mode is active.
 * @interface ISettings
 *
 * NOTE: same ISettings interface from public type declarations extended with private properties.
 */
export interface ISettings {
  readonly core: {
    authorizationKey: string,
    key: SplitIO.SplitKey,
    trafficType?: string,
    labelsEnabled: boolean,
    IPAddressesEnabled: boolean
  },
  readonly mode: SDKMode,
  readonly scheduler: {
    featuresRefreshRate: number,
    impressionsRefreshRate: number,
    impressionsQueueSize: number,
    /**
     * @deprecated
     */
    metricsRefreshRate?: number,
    telemetryRefreshRate: number,
    segmentsRefreshRate: number,
    offlineRefreshRate: number,
    eventsPushRate: number,
    eventsQueueSize: number,
    pushRetryBackoffBase: number
  },
  readonly startup: {
    readyTimeout: number,
    requestTimeoutBeforeReady: number,
    retriesOnFailureBeforeReady: number,
    eventsFirstPushWindow: number
  },
  readonly storage: IStorageSyncFactory | IStorageAsyncFactory,
  readonly integrations: Array<{
    readonly type: string,
    (params: IIntegrationFactoryParams): IIntegration | void
  }>,
  readonly urls: {
    events: string,
    sdk: string,
    auth: string,
    streaming: string,
    telemetry: string
  },
  readonly debug: boolean | LogLevel | ILogger,
  readonly version: string,
  features: SplitIO.MockedFeaturesFilePath | SplitIO.MockedFeaturesMap,
  readonly streamingEnabled: boolean,
  readonly sync: {
    splitFilters: SplitIO.SplitFilter[],
    impressionsMode: SplitIO.ImpressionsMode,
    __splitFiltersValidation: ISplitFiltersValidation,
    localhostMode?: SplitIO.LocalhostFactory,
    enabled: boolean
  },
  readonly runtime: {
    ip: string | false
    hostname: string | false
  },
  readonly log: ILogger
  readonly impressionListener?: unknown
  readonly userConsent?: ConsentStatus
}
/**
 * Log levels.
 * @typedef {string} LogLevel
 */
export type LogLevel = 'DEBUG' | 'INFO' | 'WARN' | 'ERROR' | 'NONE';
/**
 * Logger API
 * @interface ILoggerAPI
 */
export interface ILoggerAPI {
  /**
   * Enables SDK logging to the console.
   * @function enable
   * @returns {void}
   */
  enable(): void,
  /**
   * Disables SDK logging.
   * @function disable
   * @returns {void}
   */
  disable(): void,
  /**
   * Sets a log level for the SDK logs.
   * @function setLogLevel
   * @returns {void}
   */
  setLogLevel(logLevel: LogLevel): void,
  /**
   * Log level constants. Use this to pass them to setLogLevel function.
   */
  LogLevel: {
    [level: string]: LogLevel
  }
}
/**
 * Common settings between Browser and NodeJS settings interface.
 * @interface ISharedSettings
 */
interface ISharedSettings {
  /**
   * Whether the logger should be enabled or disabled by default.
   * @property {Boolean} debug
   * @default false
   */
  debug?: boolean,
  /**
   * The impression listener, which is optional. Whatever you provide here needs to comply with the SplitIO.IImpressionListener interface,
   * which will check for the logImpression method.
   * @property {IImpressionListener} impressionListener
   * @default undefined
   */
  impressionListener?: SplitIO.IImpressionListener,
  /**
   * Boolean flag to enable the streaming service as default synchronization mechanism. In the event of any issue with streaming,
   * the SDK would fallback to the polling mechanism. If false, the SDK would poll for changes as usual without attempting to use streaming.
   * @property {boolean} streamingEnabled
   * @default true
   */
  streamingEnabled?: boolean,
  /**
   * SDK synchronization settings.
   * @property {Object} sync
   */
  sync?: {
    /**
     * List of feature flag filters. These filters are used to fetch a subset of the feature flag definitions in your environment, in order to reduce the delay of the SDK to be ready.
     * This configuration is only meaningful when the SDK is working in "standalone" mode.
     *
     * Example:
     *  `splitFilter: [
     *    { type: 'byName', values: ['my_feature_flag_1', 'my_feature_flag_2'] }, // will fetch feature flags named 'my_feature_flag_1' and 'my_feature_flag_2'
     *  ]`
     * @property {SplitIO.SplitFilter[]} splitFilters
     */
    splitFilters?: SplitIO.SplitFilter[]
    /**
     * Impressions Collection Mode. Option to determine how impressions are going to be sent to Split servers.
     * Possible values are 'DEBUG' and 'OPTIMIZED'.
     * - DEBUG: will send all the impressions generated (recommended only for debugging purposes).
     * - OPTIMIZED: will send unique impressions to Split servers avoiding a considerable amount of traffic that duplicated impressions could generate.
     * @property {String} impressionsMode
     * @default 'OPTIMIZED'
     */
    impressionsMode?: SplitIO.ImpressionsMode,
    /**
     * Enables synchronization.
     * @property {boolean} enabled
     */
    enabled: boolean
  }
}
/**
 * Common settings interface for SDK instances on NodeJS.
 * @interface INodeBasicSettings
 * @extends ISharedSettings
 */
interface INodeBasicSettings extends ISharedSettings {
  /**
   * SDK Startup settings for NodeJS.
   * @property {Object} startup
   */
  startup?: {
    /**
     * Maximum amount of time used before notify a timeout.
     * @property {number} readyTimeout
     * @default 15
     */
    readyTimeout?: number,
    /**
     * Time to wait for a request before the SDK is ready. If this time expires, JS Sdk will retry 'retriesOnFailureBeforeReady' times before notifying its failure to be 'ready'.
     * @property {number} requestTimeoutBeforeReady
     * @default 15
     */
    requestTimeoutBeforeReady?: number,
    /**
     * How many quick retries we will do while starting up the SDK.
     * @property {number} retriesOnFailureBeforeReady
     * @default 1
     */
    retriesOnFailureBeforeReady?: number,
    /**
     * For SDK posts the queued events data in bulks with a given rate, but the first push window is defined separately,
     * to better control on browsers. This number defines that window before the first events push.
     *
     * @property {number} eventsFirstPushWindow
     * @default 0
     */
    eventsFirstPushWindow?: number,
  },
  /**
   * SDK scheduler settings.
   * @property {Object} scheduler
   */
  scheduler?: {
    /**
     * The SDK polls Split servers for changes to feature roll-out plans. This parameter controls this polling period in seconds.
     * @property {number} featuresRefreshRate
     * @default 5
     */
    featuresRefreshRate?: number,
    /**
     * The SDK sends information on who got what treatment at what time back to Split servers to power analytics. This parameter controls how often this data is sent to Split servers. The parameter should be in seconds.
     * @property {number} impressionsRefreshRate
     * @default 300
     */
    impressionsRefreshRate?: number,
    /**
     * The maximum number of impression items we want to queue. If we queue more values, it will trigger a flush and reset the timer.
     * If you use a 0 here, the queue will have no maximum size.
     * @property {number} impressionsQueueSize
     * @default 30000
     */
    impressionsQueueSize?: number,
    /**
     * The SDK sends diagnostic metrics to Split servers. This parameters controls this metric flush period in seconds.
     * @property {number} metricsRefreshRate
     * @default 120
     * @deprecated This parameter is ignored now.
     */
    metricsRefreshRate?: number,
    /**
     * The SDK sends diagnostic metrics to Split servers. This parameters controls this metric flush period in seconds.
     * @property {number} telemetryRefreshRate
     * @default 3600
     */
    telemetryRefreshRate?: number,
    /**
     * The SDK polls Split servers for changes to segment definitions. This parameter controls this polling period in seconds.
     * @property {number} segmentsRefreshRate
     * @default 60
     */
    segmentsRefreshRate?: number,
    /**
     * The SDK posts the queued events data in bulks. This parameter controls the posting rate in seconds.
     * @property {number} eventsPushRate
     * @default 60
     */
    eventsPushRate?: number,
    /**
     * The maximum number of event items we want to queue. If we queue more values, it will trigger a flush and reset the timer.
     * If you use a 0 here, the queue will have no maximum size.
     * @property {number} eventsQueueSize
     * @default 500
     */
    eventsQueueSize?: number,
    /**
     * For mocking/testing only. The SDK will refresh the features mocked data when mode is set to "localhost" by defining the key.
     * For more information @see {@link https://help.split.io/hc/en-us/articles/360020564931-Node-js-SDK#localhost-mode}
     * @property {number} offlineRefreshRate
     * @default 15
     */
    offlineRefreshRate?: number
    /**
     * When using streaming mode, seconds to wait before re attempting to connect for push notifications.
     * Next attempts follow intervals in power of two: base seconds, base x 2 seconds, base x 4 seconds, ...
     * @property {number} pushRetryBackoffBase
     * @default 1
     */
    pushRetryBackoffBase?: number,
  },
  /**
   * SDK Core settings for NodeJS.
   * @property {Object} core
   */
  core: {
    /**
     * Your SDK key. More information: @see {@link https://help.split.io/hc/en-us/articles/360019916211-API-keys}
     * @property {string} authorizationKey
     */
    authorizationKey: string,
    /**
     * Disable labels from being sent to Split backend. Labels may contain sensitive information.
     * @property {boolean} labelsEnabled
     * @default true
     */
    labelsEnabled?: boolean
    /**
     * Disable machine IP and Name from being sent to Split backend.
     * @property {boolean} IPAddressesEnabled
     * @default true
     */
    IPAddressesEnabled?: boolean
  },
  /**
   * Defines which kind of storage we should instanciate.
   * @property {Object} storage
   */
  storage?: (params: any) => any,
  /**
   * The SDK mode. Possible values are "standalone" (which is the default) and "consumer". For "localhost" mode, use "localhost" as authorizationKey.
   * @property {SDKMode} mode
   * @default 'standalone'
   */
  mode?: SDKMode,
  /**
   * Mocked features file path. For testing purposses only. For using this you should specify "localhost" as authorizationKey on core settings.
   * @see {@link https://help.split.io/hc/en-us/articles/360020564931-Node-js-SDK#localhost-mode}
   * @property {MockedFeaturesFilePath} features
   * @default '$HOME/.split'
   */
  features?: SplitIO.MockedFeaturesFilePath,
}
/**
 * Common API for entities that expose status handlers.
 * @interface IStatusInterface
 * @extends IEventEmitter
 */
export interface IStatusInterface extends IEventEmitter {
  /**
   * Constant object containing the SDK events for you to use.
   * @property {EventConsts} Event
   */
  Event: EventConsts,
  /**
   * Returns a promise that will be resolved once the SDK has finished loading (SDK_READY event emitted) or rejected if the SDK has timedout (SDK_READY_TIMED_OUT event emitted).
   * As it's meant to provide similar flexibility to the event approach, given that the SDK might be eventually ready after a timeout event, calling the `ready` method after the
   * SDK had timed out will return a new promise that should eventually resolve if the SDK gets ready.
   *
   * Caveats: the method was designed to avoid an unhandled Promise rejection if the rejection case is not handled, so that `onRejected` handler is optional when using promises.
   * However, when using async/await syntax, the rejection should be explicitly propagated like in the following example:
   * ```
   * try {
   *   await client.ready().catch((e) => { throw e; });
   *   // SDK is ready
   * } catch(e) {
   *   // SDK has timedout
   * }
   * ```
   *
   * @function ready
   * @returns {Promise<void>}
   */
  ready(): Promise<void>
}
/**
 * Common definitions between clients for different environments interface.
 * @interface IBasicClient
 * @extends IStatusInterface
 */
interface IBasicClient extends IStatusInterface {
  /**
   * Flush data
   * @function flush
   * @return {Promise<void>}
   */
  flush(): Promise<void>
  /**
   * Destroy the client instance.
   * @function destroy
   * @returns {Promise<void>}
   */
  destroy(): Promise<void>

  // Whether the client implements the client-side API, i.e, with bound key, (true), or the server-side API (false).
  // Exposed for internal purposes only. Not considered part of the public API, and might be renamed eventually.
  isClientSide: boolean
}
/**
 * Common definitions between SDK instances for different environments interface.
 * @interface IBasicSDK
 */
interface IBasicSDK {
  /**
   * Current settings of the SDK instance.
   * @property settings
   */
  settings: ISettings,
  /**
   * Logger API.
   * @property Logger
   */
  Logger: ILoggerAPI
}
/****** Exposed namespace ******/
/**
 * Types and interfaces for @splitsoftware/splitio package for usage when integrating javascript sdk on typescript apps.
 * For the SDK package information
 * @see {@link https://www.npmjs.com/package/@splitsoftware/splitio}
 */
export namespace SplitIO {
  /**
   * Feature flag treatment value, returned by getTreatment.
   * @typedef {string} Treatment
   */
  export type Treatment = string;
  /**
   * Feature flag treatment promise that will resolve to actual treatment value.
   * @typedef {Promise<string>} AsyncTreatment
   */
  export type AsyncTreatment = Promise<string>;
  /**
   * An object with the treatments for a bulk of feature flags, returned by getTreatments. For example:
   *   {
   *     feature1: 'on',
   *     feature2: 'off
   *   }
   * @typedef {Object.<Treatment>} Treatments
   */
  export type Treatments = {
    [featureName: string]: Treatment
  };
  /**
   * Feature flag treatments promise that will resolve to the actual SplitIO.Treatments object.
   * @typedef {Promise<Treatments>} AsyncTreatments
   */
  export type AsyncTreatments = Promise<Treatments>;
  /**
   * Feature flag evaluation result with treatment and configuration, returned by getTreatmentWithConfig.
   * @typedef {Object} TreatmentWithConfig
   * @property {string} treatment The treatment string
   * @property {string | null} config The stringified version of the JSON config defined for that treatment, null if there is no config for the resulting treatment.
   */
  export type TreatmentWithConfig = {
    treatment: string,
    config: string | null
  };
  /**
   * Feature flag treatment promise that will resolve to actual treatment with config value.
   * @typedef {Promise<TreatmentWithConfig>} AsyncTreatmentWithConfig
   */
  export type AsyncTreatmentWithConfig = Promise<TreatmentWithConfig>;
  /**
   * An object with the treatments with configs for a bulk of feature flags, returned by getTreatmentsWithConfig.
   * Each existing configuration is a stringified version of the JSON you defined on the Split user interface. For example:
   *   {
   *     feature1: { treatment: 'on', config: null }
   *     feature2: { treatment: 'off', config: '{"bannerText":"Click here."}' }
   *   }
   * @typedef {Object.<TreatmentWithConfig>} Treatments
   */
  export type TreatmentsWithConfig = {
    [featureName: string]: TreatmentWithConfig
  };
  /**
   * Feature flag treatments promise that will resolve to the actual SplitIO.TreatmentsWithConfig object.
   * @typedef {Promise<TreatmentsWithConfig>} AsyncTreatmentsWithConfig
   */
  export type AsyncTreatmentsWithConfig = Promise<TreatmentsWithConfig>;
  /**
   * Possible Split SDK events.
   * @typedef {string} Event
   */
  export type Event = 'init::timeout' | 'init::ready' | 'init::cache-ready' | 'state::update';
  /**
   * Attributes should be on object with values of type string or number (dates should be sent as millis since epoch).
   * @typedef {Object.<AttributeType>} Attributes
   * @see {@link https://help.split.io/hc/en-us/articles/360020448791-JavaScript-SDK#attribute-syntax}
   */
  export type Attributes = {
    [attributeName: string]: AttributeType
  };
  /**
   * Type of an attribute value
   * @typedef {string | number | boolean | Array<string | number>} AttributeType
   */
  export type AttributeType = string | number | boolean | Array<string | number>;
  /**
   * Properties should be an object with values of type string, number, boolean or null. Size limit of ~31kb.
   * @typedef {Object.<number, string, boolean, null>} Attributes
   * @see {@link https://help.split.io/hc/en-us/articles/360020448791-JavaScript-SDK#track
   */
  export type Properties = {
    [propertyName: string]: string | number | boolean | null
  };
  /**
   * The SplitKey object format.
   * @typedef {Object.<string>} SplitKeyObject
   */
  export type SplitKeyObject = {
    matchingKey: string,
    bucketingKey: string
  };
  /**
   * The customer identifier. Could be a SplitKeyObject or a string.
   * @typedef {SplitKeyObject|string} SplitKey
   */
  export type SplitKey = SplitKeyObject | string;
  /**
   * Path to file with mocked features (for node).
   * @typedef {string} MockedFeaturesFilePath
   */
  export type MockedFeaturesFilePath = string;
  /**
   * Object with mocked features mapping (for browser). We need to specify the featureName as key, and the mocked treatment as value.
   * @typedef {Object} MockedFeaturesMap
   */
  export type MockedFeaturesMap = {
    [featureName: string]: string | TreatmentWithConfig
  };
  /**
   * Object with information about an impression. It contains the generated impression DTO as well as
   * complementary information around where and how it was generated in that way.
   * @typedef {Object} ImpressionData
   */
  export type ImpressionData = {
    impression: ImpressionDTO,
    attributes?: SplitIO.Attributes,
    ip: string | false,
    hostname: string | false,
    sdkLanguageVersion: string
  };
  /**
   * Data corresponding to one feature flag view.
   * @typedef {Object} SplitView
   */
  export type SplitView = {
    /**
     * The name of the feature flag.
     * @property {string} name
     */
    name: string,
    /**
     * The traffic type of the feature flag.
     * @property {string} trafficType
     */
    trafficType: string,
    /**
     * Whether the feature flag is killed or not.
     * @property {boolean} killed
     */
    killed: boolean,
    /**
     * The list of treatments available for the feature flag.
     * @property {Array<string>} treatments
     */
    treatments: Array<string>,
    /**
     * Current change number of the feature flag.
     * @property {number} changeNumber
     */
    changeNumber: number,
    /**
     * Map of configurations per treatment.
     * Each existing configuration is a stringified version of the JSON you defined on the Split user interface.
     * @property {Object.<string>} configs
     */
    configs: {
      [treatmentName: string]: string
    },
    /**
     * List of sets of the feature flag.
     * @property {string[]} sets
     */
    sets: string[],
    /**
     * The default treatment of the feature flag.
     * @property {string} defaultTreatment
     */
    defaultTreatment: string,
  };
  /**
   * A promise that resolves to a feature flag view.
   * @typedef {Promise<SplitView>} SplitView
   */
  export type SplitViewAsync = Promise<SplitView>;
  /**
   * An array containing the SplitIO.SplitView elements.
   */
  export type SplitViews = Array<SplitView>;
  /**
   * A promise that resolves to an SplitIO.SplitViews array.
   * @typedef {Promise<SplitViews>} SplitViewsAsync
   */
  export type SplitViewsAsync = Promise<SplitViews>;
  /**
   * An array of feature flag names.
   * @typedef {Array<string>} SplitNames
   */
  export type SplitNames = Array<string>;
  /**
   * A promise that resolves to an array of feature flag names.
   * @typedef {Promise<SplitNames>} SplitNamesAsync
   */
  export type SplitNamesAsync = Promise<SplitNames>;
  /**
   * Localhost mode factory.
   */
  export type LocalhostFactory = {
    type: 'LocalhostFromObject' | 'LocalhostFromFile'
    (params: ISdkFactoryContext): ISyncManagerCS
  }
  /**
   * Impression listener interface. This is the interface that needs to be implemented
   * by the element you provide to the SDK as impression listener.
   * @interface IImpressionListener
   * @see {@link https://help.split.io/hc/en-us/articles/360020564931-Node-js-SDK#listener}
   */
  export interface IImpressionListener {
    logImpression(data: SplitIO.ImpressionData): void
  }
  /**
   * Object with information about a Split event.
   * @typedef {Object} EventData
   */
  export type EventData = {
    eventTypeId: string;
    value?: number;
    properties?: Properties;
    trafficTypeName?: string;
    key?: string; // matching user key
    timestamp: number;
  };
  /**
   * Object representing the data sent by Split (events and impressions).
   * @typedef {Object} IntegrationData
   * @property {string} type The type of Split data, either 'IMPRESSION' or 'EVENT'.
   * @property {ImpressionData | EventData} payload The data instance itself.
   */
  export type IntegrationData = { type: 'IMPRESSION', payload: SplitIO.ImpressionData } | { type: 'EVENT', payload: SplitIO.EventData };
  /**
   * Available URL settings for the SDKs.
   */
  export type UrlSettings = {
    /**
     * String property to override the base URL where the SDK will get rollout plan related data, like feature flags and segments definitions.
     * @property {string} sdk
     * @default 'https://sdk.split.io/api'
     */
    sdk?: string,
    /**
     * String property to override the base URL where the SDK will post event-related information like impressions.
     * @property {string} events
     * @default 'https://events.split.io/api'
     */
    events?: string,
    /**
     * String property to override the base URL where the SDK will get authorization tokens to be used with functionality that requires it, like streaming.
     * @property {string} auth
     * @default 'https://auth.split.io/api'
     */
    auth?: string,
    /**
     * String property to override the base URL where the SDK will connect to receive streaming updates.
     * @property {string} streaming
     * @default 'https://streaming.split.io'
     */
    streaming?: string,
    /**
     * String property to override the base URL where the SDK will post telemetry data.
     * @property {string} telemetry
     * @default 'https://telemetry.split.io/api'
     */
    telemetry?: string
  };
  /**
   * SplitFilter type.
   * @typedef {string} SplitFilterType
   */
  export type SplitFilterType = 'byName' | 'byPrefix' | 'bySet';
  /**
   * Defines a feature flag filter, described by a type and list of values.
   */
  export interface SplitFilter {
    /**
     * Type of the filter.
     * @property {SplitFilterType} type
     */
    type: SplitFilterType,
    /**
     * List of values: feature flag names for 'byName' filter type, and feature flag name prefixes for 'byPrefix' type.
     * @property {string[]} values
     */
    values: string[],
  }
  /**
  * ImpressionsMode type
  * @typedef {string} ImpressionsMode
  */
  export type ImpressionsMode = 'OPTIMIZED' | 'DEBUG' | 'NONE'
  /**
   * Defines the format of rollout plan data to preload on the factory storage (cache).
   */
  export interface PreloadedData {
    /**
     * Timestamp of the last moment the data was synchronized with Split servers.
     * If this value is older than 10 days ago (expiration time policy), the data is not used to update the storage content.
     * @TODO configurable expiration time policy?
     */
    lastUpdated: number,
    /**
     * Change number of the preloaded data.
     * If this value is older than the current changeNumber at the storage, the data is not used to update the storage content.
     */
    since: number,
    /**
     * Map of feature flags to their stringified definitions.
     */
    splitsData: {
      [splitName: string]: string
    },
    /**
     * Optional map of user keys to their list of segments.
     * @TODO remove when releasing first version
     */
    mySegmentsData?: {
      [key: string]: string[]
    },
    /**
     * Optional map of segments to their stringified definitions.
     * This property is ignored if `mySegmentsData` was provided.
     */
    segmentsData?: {
      [segmentName: string]: string
    },
  }
  /**
   * Settings interface for SDK instances created on the browser
   * @interface IBrowserSettings
   * @extends ISharedSettings
   * @see {@link https://help.split.io/hc/en-us/articles/360020448791-JavaScript-SDK#configuration}
   */
  export interface IBrowserSettings extends ISharedSettings {
    /**
     * SDK Startup settings for the Browser.
     * @property {Object} startup
     */
    startup?: {
      /**
       * Maximum amount of time used before notify a timeout.
       * @property {number} readyTimeout
       * @default 1.5
       */
      readyTimeout?: number,
      /**
       * Time to wait for a request before the SDK is ready. If this time expires, JS Sdk will retry 'retriesOnFailureBeforeReady' times before notifying its failure to be 'ready'.
       * @property {number} requestTimeoutBeforeReady
       * @default 1.5
       */
      requestTimeoutBeforeReady?: number,
      /**
       * How many quick retries we will do while starting up the SDK.
       * @property {number} retriesOnFailureBeforeReady
       * @default 1
       */
      retriesOnFailureBeforeReady?: number,
      /**
       * For SDK posts the queued events data in bulks with a given rate, but the first push window is defined separately,
       * to better control on browsers. This number defines that window before the first events push.
       *
       * @property {number} eventsFirstPushWindow
       * @default 10
       */
      eventsFirstPushWindow?: number,
    },
    /**
     * SDK scheduler settings.
     * @property {Object} scheduler
     */
    scheduler?: {
      /**
       * The SDK polls Split servers for changes to feature flag definitions. This parameter controls this polling period in seconds.
       * @property {number} featuresRefreshRate
       * @default 60
       */
      featuresRefreshRate?: number,
      /**
       * The SDK sends information on who got what treatment at what time back to Split servers to power analytics. This parameter controls how often this data is sent to Split servers. The parameter should be in seconds.
       * @property {number} impressionsRefreshRate
       * @default 300
       */
      impressionsRefreshRate?: number,
      /**
       * The maximum number of impression items we want to queue. If we queue more values, it will trigger a flush and reset the timer.
       * If you use a 0 here, the queue will have no maximum size.
       * @property {number} impressionsQueueSize
       * @default 30000
       */
      impressionsQueueSize?: number,
      /**
       * The SDK sends diagnostic metrics to Split servers. This parameters controls this metric flush period in seconds.
       * @property {number} metricsRefreshRate
       * @default 120
       * @deprecated This parameter is ignored now. Use `telemetryRefreshRate` instead.
       */
      metricsRefreshRate?: number,
      /**
       * The SDK sends diagnostic metrics to Split servers. This parameters controls this metric flush period in seconds.
       * @property {number} telemetryRefreshRate
       * @default 3600
       */
      telemetryRefreshRate?: number,
      /**
       * The SDK polls Split servers for changes to segment definitions. This parameter controls this polling period in seconds.
       * @property {number} segmentsRefreshRate
       * @default 60
       */
      segmentsRefreshRate?: number,
      /**
       * The SDK posts the queued events data in bulks. This parameter controls the posting rate in seconds.
       * @property {number} eventsPushRate
       * @default 60
       */
      eventsPushRate?: number,
      /**
       * The maximum number of event items we want to queue. If we queue more values, it will trigger a flush and reset the timer.
       * If you use a 0 here, the queue will have no maximum size.
       * @property {number} eventsQueueSize
       * @default 500
       */
      eventsQueueSize?: number,
      /**
       * For mocking/testing only. The SDK will refresh the features mocked data when mode is set to "localhost" by defining the key.
       * For more information @see {@link https://help.split.io/hc/en-us/articles/360020564931-Node-js-SDK#localhost-mode}
       * @property {number} offlineRefreshRate
       * @default 15
       */
      offlineRefreshRate?: number
      /**
       * When using streaming mode, seconds to wait before re attempting to connect for push notifications.
       * Next attempts follow intervals in power of two: base seconds, base x 2 seconds, base x 4 seconds, ...
       * @property {number} pushRetryBackoffBase
       * @default 1
       */
      pushRetryBackoffBase?: number,
    },
    /**
     * SDK Core settings for the browser.
     * @property {Object} core
     */
    core: {
      /**
       * Your SDK key. More information: @see {@link https://help.split.io/hc/en-us/articles/360019916211-API-keys}
       * @property {string} authorizationKey
       */
      authorizationKey: string,
      /**
       * Customer identifier. Whatever this means to you. @see {@link https://help.split.io/hc/en-us/articles/360019916311-Traffic-type}
       * @property {SplitKey} key
       */
      key: SplitKey,
      /**
       * Traffic type associated with the customer identifier. @see {@link https://help.split.io/hc/en-us/articles/360019916311-Traffic-type}
       * If no provided as a setting it will be required on the client.track() calls.
       * @property {string} trafficType
       */
      trafficType?: string,
      /**
       * Disable labels from being sent to Split backend. Labels may contain sensitive information.
       * @property {boolean} labelsEnabled
       * @default true
       */
      labelsEnabled?: boolean
    },
    /**
     * Mocked features map. For testing purposses only. For using this you should specify "localhost" as authorizationKey on core settings.
     * @see {@link https://help.split.io/hc/en-us/articles/360020564931-Node-js-SDK#localhost-mode}
     */
    features?: MockedFeaturesMap,
    /**
     * Defines which kind of storage we should instanciate.
     * @property {Object} storage
     */
    storage?: (params: IStorageFactoryParams) => IStorageSync | IStorageAsync,
    /**
     * List of URLs that the SDK will use as base for it's synchronization functionalities, applicable only when running as standalone.
     * Do not change these settings unless you're working an advanced use case, like connecting to the Split proxy.
     * @property {Object} urls
     */
    urls?: UrlSettings,
  }
  /**
   * Settings interface for SDK instances created on NodeJS.
   * If your storage is asynchronous (Redis for example) use SplitIO.INodeAsyncSettings instead.
   * @interface INodeSettings
   * @extends INodeBasicSettings
   * @see {@link https://help.split.io/hc/en-us/articles/360020564931-Node-js-SDK#configuration}
   */
  export interface INodeSettings extends INodeBasicSettings {
    /**
     * List of URLs that the SDK will use as base for it's synchronization functionalities, applicable only when running as standalone.
     * Do not change these settings unless you're working an advanced use case, like connecting to the Split proxy.
     * @property {Object} urls
     */
    urls?: UrlSettings,
    /**
     * Defines which kind of storage we should instanciate.
     * @property {Object} storage
     */
    storage?: (params: IStorageFactoryParams) => IStorageSync,
  }
  /**
   * Settings interface with async storage for SDK instances created on NodeJS.
   * If your storage is synchronous (by defaut we use memory, which is sync) use SplitIO.INodeSyncSettings instead.
   * @interface INodeAsyncSettings
   * @extends INodeBasicSettings
   * @see {@link https://help.split.io/hc/en-us/articles/360020564931-Node-js-SDK#configuration}
   */
  export interface INodeAsyncSettings extends INodeBasicSettings {
    storage?: (params: IStorageFactoryParams) => IStorageAsync,
  }
  /**
   * This represents the interface for the Server-side SDK instance with synchronous storage.
   * @interface ISDK
   * @extends IBasicSDK
   */
  export interface ISDK extends IBasicSDK {
    /**
     * Returns the client instance of the SDK.
     * @function client
     * @returns {IClient} The client instance.
     */
    client(): IClient,
    /**
     * Returns a manager instance of the SDK to explore available information.
     * @function manager
     * @returns {IManager} The manager instance.
     */
    manager(): IManager
  }
  /**
   * This represents the interface for the Server-side SDK instance with asynchronous storage.
   * @interface IAsyncSDK
   * @extends IBasicSDK
   */
  export interface IAsyncSDK extends IBasicSDK {
    /**
     * Returns the default client instance of the SDK.
     * @function client
     * @returns {IAsyncClient} The asynchronous client instance.
     */
    client(): IAsyncClient,
    /**
     * Returns a manager instance of the SDK to explore available information.
     * @function manager
     * @returns {IManager} The manager instance.
     */
    manager(): IAsyncManager
  }
  /**
   * This represents the interface for the Client-side SDK instance with synchronous storage.
   * @interface ICsSDK
   * @extends IBasicSDK
   */
  export interface ICsSDK extends IBasicSDK {
    /**
     * Returns the default client instance of the SDK, with the key and optional traffic type from settings.
     * @function client
     * @returns {ICsClient} The client instance.
     */
    client(): ICsClient,
    /**
     * Returns a shared client of the SDK, with the given key and optional traffic type.
     * @function client
     * @param {SplitKey} key The key for the new client instance.
     * @param {string=} trafficType The traffic type of the provided key.
     * @returns {ICsClient} The client instance.
     */
    client(key: SplitKey, trafficType?: string): ICsClient,
    /**
     * Returns a manager instance of the SDK to explore available information.
     * @function manager
     * @returns {IManager} The manager instance.
     */
    manager(): IManager
  }
  /**
   * This represents the interface for the Client instance with synchronous storage for server-side SDK, where we don't have only one key.
   * @interface IClient
   * @extends IBasicClient
   */
  export interface IClient extends IBasicClient {
    /**
     * Returns a Treatment value, which is the treatment string for the given feature.
     * @function getTreatment
     * @param {string} key - The string key representing the consumer.
     * @param {string} featureFlagName - The string that represents the feature flag we want to get the treatment.
     * @param {Attributes=} attributes - An object of type Attributes defining the attributes for the given key.
     * @returns {Treatment} The treatment string.
     */
    getTreatment(key: SplitKey, featureFlagName: string, attributes?: Attributes): Treatment,
    /**
     * Returns a TreatmentWithConfig value, which is an object with both treatment and config string for the given feature.
     * @function getTreatmentWithConfig
     * @param {string} key - The string key representing the consumer.
     * @param {string} featureFlagName - The string that represents the feature flag we want to get the treatment.
     * @param {Attributes=} attributes - An object of type Attributes defining the attributes for the given key.
     * @returns {TreatmentWithConfig} The TreatmentWithConfig, the object containing the treatment string and the
     *                                configuration stringified JSON (or null if there was no config for that treatment).
     */
    getTreatmentWithConfig(key: SplitKey, featureFlagName: string, attributes?: Attributes): TreatmentWithConfig,
    /**
     * Returns a Treatments value, which is an object map with the treatments for the given features.
     * @function getTreatments
     * @param {string} key - The string key representing the consumer.
     * @param {Array<string>} featureFlagNames - An array of the feature flag names we want to get the treatments.
     * @param {Attributes=} attributes - An object of type Attributes defining the attributes for the given key.
     * @returns {Treatments} The treatments object map.
     */
    getTreatments(key: SplitKey, featureFlagNames: string[], attributes?: Attributes): Treatments,
    /**
     * Returns a TreatmentsWithConfig value, which is an object map with the TreatmentWithConfig (an object with both treatment and config string) for the given features.
     * @function getTreatmentsWithConfig
     * @param {string} key - The string key representing the consumer.
     * @param {Array<string>} featureFlagNames - An array of the feature flag names we want to get the treatments.
     * @param {Attributes=} attributes - An object of type Attributes defining the attributes for the given key.
     * @returns {TreatmentsWithConfig} The map with all the TreatmentWithConfig objects
     */
    getTreatmentsWithConfig(key: SplitKey, featureFlagNames: string[], attributes?: Attributes): TreatmentsWithConfig,
    /**
     * Returns a Treatments value, which is an object map with the treatments for the feature flags related to the given flagSet.
     * @function getTreatmentsByFlagSet
     * @param {string} key - The string key representing the consumer.
     * @param {string} flagSet - The flagSet name we want to get the treatments.
     * @param {Attributes=} attributes - An object of type Attributes defining the attributes for the given key.
     * @returns {Treatments} The map with all the TreatmentWithConfig objects
     */
    getTreatmentsByFlagSet(key: SplitKey, flagSet: string, attributes?: Attributes): Treatments,
    /**
     * Returns a TreatmentsWithConfig value, which is an object map with the TreatmentWithConfig (an object with both treatment and config string) for the feature flags related to the given flagSets.
     * @function getTreatmentsWithConfigByFlagSet
     * @param {string} key - The string key representing the consumer.
     * @param {string} flagSet - The flagSet name we want to get the treatments.
     * @param {Attributes=} attributes - An object of type Attributes defining the attributes for the given key.
     * @returns {Treatments} The map with all the TreatmentWithConfig objects
     */
    getTreatmentsWithConfigByFlagSet(key: SplitKey, flagSet: string, attributes?: Attributes): TreatmentsWithConfig,
    /**
     * Returns a Returns a Treatments value, which is an object with both treatment and config string for to the feature flags related to the given flagSets.
     * @function getTreatmentsByFlagSets
     * @param {string} key - The string key representing the consumer.
     * @param {Array<string>} flagSets - An array of the flagSet names we want to get the treatments.
     * @param {Attributes=} attributes - An object of type Attributes defining the attributes for the given key.
     * @returns {Treatments} The map with all the TreatmentWithConfig objects
     */
    getTreatmentsByFlagSets(key: SplitKey, flagSets: string[], attributes?: Attributes): Treatments,
    /**
     * Returns a TreatmentsWithConfig value, which is an object map with the TreatmentWithConfig (an object with both treatment and config string) for the feature flags related to the given flagSets.
     * @function getTreatmentsWithConfigByFlagSets
     * @param {string} key - The string key representing the consumer.
     * @param {Array<string>} flagSets - An array of the flagSet names we want to get the treatments.
     * @param {Attributes=} attributes - An object of type Attributes defining the attributes for the given key.
     * @returns {Treatments} The map with all the TreatmentWithConfig objects
     */
    getTreatmentsWithConfigByFlagSets(key: SplitKey, flagSets: string[], attributes?: Attributes): TreatmentsWithConfig,
    /**
     * Tracks an event to be fed to the results product on Split user interface.
     * @function track
     * @param {SplitKey} key - The key that identifies the entity related to this event.
     * @param {string} trafficType - The traffic type of the entity related to this event.
     * @param {string} eventType - The event type corresponding to this event.
     * @param {number=} value - The value of this event.
     * @param {Properties=} properties - The properties of this event. Values can be string, number, boolean or null.
     * @returns {boolean} Whether the event was added to the queue successfully or not.
     */
    track(key: SplitIO.SplitKey, trafficType: string, eventType: string, value?: number, properties?: Properties): boolean,
  }
  /**
   * This represents the interface for the Client instance with asynchronous storage for server-side SDK, where we don't have only one key.
   * @interface IAsyncClient
   * @extends IBasicClient
   */
  export interface IAsyncClient extends IBasicClient {
    /**
     * Returns a Treatment value, which will be (or eventually be) the treatment string for the given feature.
     * For usage on NodeJS as we don't have only one key.
     * NOTE: Treatment will be a promise only in async storages, like REDIS.
     * @function getTreatment
     * @param {string} key - The string key representing the consumer.
     * @param {string} featureFlagName - The string that represents the feature flag we want to get the treatment.
     * @param {Attributes=} attributes - An object of type Attributes defining the attributes for the given key.
     * @returns {AsyncTreatment} Treatment promise that resolves to the treatment string.
     */
    getTreatment(key: SplitKey, featureFlagName: string, attributes?: Attributes): AsyncTreatment,
    /**
     * Returns a TreatmentWithConfig value, which will be (or eventually be) an object with both treatment and config string for the given feature.
     * For usage on NodeJS as we don't have only one key.
     * NOTE: Treatment will be a promise only in async storages, like REDIS.
     * @function getTreatmentWithConfig
     * @param {string} key - The string key representing the consumer.
     * @param {string} featureFlagName - The string that represents the feature flag we want to get the treatment.
     * @param {Attributes=} attributes - An object of type Attributes defining the attributes for the given key.
     * @returns {AsyncTreatmentWithConfig} TreatmentWithConfig promise that resolves to the TreatmentWithConfig object.
     */
    getTreatmentWithConfig(key: SplitKey, featureFlagName: string, attributes?: Attributes): AsyncTreatmentWithConfig,
    /**
     * Returns a Treatments value, which will be (or eventually be) an object map with the treatments for the given features.
     * For usage on NodeJS as we don't have only one key.
     * @function getTreatments
     * @param {string} key - The string key representing the consumer.
     * @param {Array<string>} featureFlagNames - An array of the feature flag names we want to get the treatments.
     * @param {Attributes=} attributes - An object of type Attributes defining the attributes for the given key.
     * @returns {AsyncTreatments} Treatments promise that resolves to the treatments object map.
     */
    getTreatments(key: SplitKey, featureFlagNames: string[], attributes?: Attributes): AsyncTreatments,
    /**
     * Returns a TreatmentsWithConfig value, which will be (or eventually be) an object map with the TreatmentWithConfig (an object with both treatment and config string) for the given features.
     * For usage on NodeJS as we don't have only one key.
     * @function getTreatmentsWithConfig
     * @param {string} key - The string key representing the consumer.
     * @param {Array<string>} featureFlagNames - An array of the feature flag names we want to get the treatments.
     * @param {Attributes=} attributes - An object of type Attributes defining the attributes for the given key.
     * @returns {AsyncTreatmentsWithConfig} TreatmentsWithConfig promise that resolves to the map of TreatmentsWithConfig objects.
     */
    getTreatmentsWithConfig(key: SplitKey, featureFlagNames: string[], attributes?: Attributes): AsyncTreatmentsWithConfig,
    /**
     * Returns a Treatments value, which will be (or eventually be) an object map with the treatments for the features related to the given flag set.
     * For usage on NodeJS as we don't have only one key.
     * @function getTreatmentsByFlagSet
     * @param {string} key - The string key representing the consumer.
     * @param {string} flagSet - The flag set name we want to get the treatments.
     * @param {Attributes=} attributes - An object of type Attributes defining the attributes for the given key.
     * @returns {Treatments} The map with all the TreatmentWithConfig objects
     */
    getTreatmentsByFlagSet(key: SplitKey, flagSet: string, attributes?: Attributes): AsyncTreatments,
    /**
     * Returns a TreatmentWithConfig value, which will be (or eventually be) an object with both treatment and config string for features related to the given flag set.
     * For usage on NodeJS as we don't have only one key.
     * @function getTreatmentsWithConfigByFlagSet
     * @param {string} key - The string key representing the consumer.
     * @param {string} flagSet - The flag set name we want to get the treatments.
     * @param {Attributes=} attributes - An object of type Attributes defining the attributes for the given key.
     * @returns {Treatments} The map with all the TreatmentWithConfig objects
     */
    getTreatmentsWithConfigByFlagSet(key: SplitKey, flagSet: string, attributes?: Attributes): AsyncTreatmentsWithConfig,
    /**
     * Returns a Treatments value, which will be (or eventually be) an object map with the treatments for the feature flags related to the given flag sets.
     * For usage on NodeJS as we don't have only one key.
     * @function getTreatmentsByFlagSets
     * @param {string} key - The string key representing the consumer.
     * @param {Array<string>} flagSets - An array of the flag set names we want to get the treatments.
     * @param {Attributes=} attributes - An object of type Attributes defining the attributes for the given key.
     * @returns {Treatments} The map with all the TreatmentWithConfig objects
     */
    getTreatmentsByFlagSets(key: SplitKey, flagSets: string[], attributes?: Attributes): AsyncTreatments,
    /**
     * Returns a TreatmentWithConfig value, which will be (or eventually be) an object with both treatment and config string for the feature flags related to the given flag sets.
     * For usage on NodeJS as we don't have only one key.
     * @function getTreatmentsWithConfigByFlagSets
     * @param {string} key - The string key representing the consumer.
     * @param {Array<string>} flagSets - An array of the flag set names we want to get the treatments.
     * @param {Attributes=} attributes - An object of type Attributes defining the attributes for the given key.
     * @returns {Treatments} The map with all the TreatmentWithConfig objects
     */
    getTreatmentsWithConfigByFlagSets(key: SplitKey, flagSets: string[], attributes?: Attributes): AsyncTreatmentsWithConfig,
    /**
     * Tracks an event to be fed to the results product on Split user interface, and returns a promise to signal when the event was successfully queued (or not).
     * @function track
     * @param {SplitKey} key - The key that identifies the entity related to this event.
     * @param {string} trafficType - The traffic type of the entity related to this event.
     * @param {string} eventType - The event type corresponding to this event.
     * @param {number=} value - The value of this event.
     * @param {Properties=} properties - The properties of this event. Values can be string, number, boolean or null.
     * @returns {Promise<boolean>} A promise that resolves to a boolean indicating if the event was added to the queue successfully or not.
     */
    track(key: SplitIO.SplitKey, trafficType: string, eventType: string, value?: number, properties?: Properties): Promise<boolean>
  }
  /**
   * This represents the interface for the Client instance with synchronous storage for client-side SDK, where each client has associated a key and optionally a traffic type.
   * @interface IClient
   * @extends IBasicClient
   */
  export interface ICsClient extends IBasicClient {
    /**
     * Returns a Treatment value, which is the treatment string for the given feature.
     * @function getTreatment
     * @param {string} featureFlagName - The string that represents the feature flag we want to get the treatment.
     * @param {Attributes=} attributes - An object of type Attributes defining the attributes for the given key.
     * @returns {Treatment} The treatment string.
     */
    getTreatment(featureFlagName: string, attributes?: Attributes): Treatment,
    /**
     * Returns a TreatmentWithConfig value, which is an object with both treatment and config string for the given feature.
     * @function getTreatmentWithConfig
     * @param {string} featureFlagName - The string that represents the feature flag we want to get the treatment.
     * @param {Attributes=} attributes - An object of type Attributes defining the attributes for the given key.
     * @returns {TreatmentWithConfig} The map containing the treatment and the configuration stringified JSON (or null if there was no config for that treatment).
     */
    getTreatmentWithConfig(featureFlagName: string, attributes?: Attributes): TreatmentWithConfig,
    /**
     * Returns a Treatments value, which is an object map with the treatments for the given features.
     * @function getTreatments
     * @param {Array<string>} featureFlagNames - An array of the feature flag names we want to get the treatments.
     * @param {Attributes=} attributes - An object of type Attributes defining the attributes for the given key.
     * @returns {Treatments} The treatments object map.
     */
    getTreatments(featureFlagNames: string[], attributes?: Attributes): Treatments,
    /**
     * Returns a TreatmentsWithConfig value, which is an object map with the TreatmentWithConfig (an object with both treatment and config string) for the given features.
     * @function getTreatmentsWithConfig
     * @param {Array<string>} featureFlagNames - An array of the feature flag names we want to get the treatments.
     * @param {Attributes=} attributes - An object of type Attributes defining the attributes for the given key.
     * @returns {TreatmentsWithConfig} The map with all the TreatmentWithConfig objects
     */
    getTreatmentsWithConfig(featureFlagNames: string[], attributes?: Attributes): TreatmentsWithConfig,
    /**
     * Returns a Treatments value, which is an object map with the treatments for the feature flags related to the given flag set.
     * @function getTreatmentsByFlagSet
     * @param {string} flagSet - The flag set name we want to get the treatments.
     * @param {Attributes=} attributes - An object of type Attributes defining the attributes for the given key.
     * @returns {Treatments} The map with all the TreatmentWithConfig objects
     */
    getTreatmentsByFlagSet(flagSet: string, attributes?: Attributes): Treatments,
    /**
     * Returns a TreatmentsWithConfig value, which is an object map with the TreatmentWithConfig (an object with both treatment and config string) for the feature flags related to the given flag set.
     * @function getTreatmentsWithConfigByFlagSet
     * @param {string} flagSet - The flag set name we want to get the treatments.
     * @param {Attributes=} attributes - An object of type Attributes defining the attributes for the given key.
     * @returns {Treatments} The map with all the TreatmentWithConfig objects
     */
    getTreatmentsWithConfigByFlagSet(flagSet: string, attributes?: Attributes): TreatmentsWithConfig,
    /**
     * Returns a Returns a Treatments value, which is an object with both treatment and config string for to the feature flags related to the given flag sets.
     * @function getTreatmentsByFlagSets
     * @param {Array<string>} flagSets - An array of the flag set names we want to get the treatments.
     * @param {Attributes=} attributes - An object of type Attributes defining the attributes for the given key.
     * @returns {Treatments} The map with all the TreatmentWithConfig objects
     */
    getTreatmentsByFlagSets(flagSets: string[], attributes?: Attributes): Treatments,
    /**
     * Returns a TreatmentsWithConfig value, which is an object map with the TreatmentWithConfig (an object with both treatment and config string) for the feature flags related to the given flag sets.
     * @function getTreatmentsWithConfigByFlagSets
     * @param {Array<string>} flagSets - An array of the flag set names we want to get the treatments.
     * @param {Attributes=} attributes - An object of type Attributes defining the attributes for the given key.
     * @returns {Treatments} The map with all the TreatmentWithConfig objects
     */
    getTreatmentsWithConfigByFlagSets(flagSets: string[], attributes?: Attributes): TreatmentsWithConfig,
    /**
     * Tracks an event to be fed to the results product on Split user interface.
     * @function track
     * @param {string} trafficType - The traffic type of the entity related to this event.
     * @param {string} eventType - The event type corresponding to this event.
     * @param {number=} value - The value of this event.
     * @param {Properties=} properties - The properties of this event. Values can be string, number, boolean or null.
     * @returns {boolean} Whether the event was added to the queue successfully or not.
     */
    track(trafficType: string, eventType: string, value?: number, properties?: Properties): boolean,
    /**
     * Add an attribute to client's in memory attributes storage
     *
     * @param {string} attributeName Attribute name
     * @param {AttributeType} attributeValue Attribute value
     * @returns {boolean} true if the attribute was stored and false otherwise
     */
    setAttribute(attributeName: string, attributeValue: AttributeType): boolean,
    /**
     * Returns the attribute with the given name
     *
     * @param {string} attributeName Attribute name
     * @returns {AttributeType} Attribute with the given name
     */
    getAttribute(attributeName: string): AttributeType,
    /**
     * Removes from client's in memory attributes storage the attribute with the given name.
     *
     * @param {string} attributeName
     * @returns {boolean} true if attribute was removed and false otherwise
     */
    removeAttribute(attributeName: string): boolean,
    /**
     * Add to client's in memory attributes storage the attributes in 'attributes'.
     *
     * @param {Attributes} attributes Object with attributes to store
     * @returns true if attributes were stored an false otherwise
     */
    setAttributes(attributes: Attributes): boolean,
    /**
     * Return all the attributes stored in client's in memory attributes storage.
     *
     * @returns {Attributes} returns all the stored attributes
     */
    getAttributes(): Attributes,
    /**
     * Remove all the stored attributes in the client's in memory attribute storage.
     *
     * @returns {boolean} true if all attribute were removed and false otherwise
     */
    clearAttributes(): boolean
  }
  /**
   * Representation of a manager instance with synchronous storage of the SDK.
   * @interface IManager
   * @extends IStatusInterface
   */
  export interface IManager extends IStatusInterface {
    /**
     * Get the array of feature flag names.
     * @function names
     * @returns {SplitNames} The list of feature flag names.
     */
    names(): SplitNames,
    /**
     * Get the array of feature flags data in SplitView format.
     * @function splits
     * @returns {SplitViews} The list of SplitIO.SplitView.
     */
    splits(): SplitViews,
    /**
     * Get the data of a split in SplitView format.
     * @function split
     * @param {string} featureFlagName The name of the feature flag we want to get info of.
     * @returns {SplitView} The SplitIO.SplitView of the given split.
     */
    split(featureFlagName: string): SplitView,
  }
  /**
   * Representation of a manager instance with asynchronous storage of the SDK.
   * @interface IAsyncManager
   * @extends IStatusInterface
   */
  export interface IAsyncManager extends IStatusInterface {
    /**
     * Get the array of feature flag names.
     * @function names
     * @returns {SplitNamesAsync} A promise that resolves to the list of feature flag names.
     */
    names(): SplitNamesAsync,
    /**
     * Get the array of feature flags data in SplitView format.
     * @function splits
     * @returns {SplitViewsAsync} A promise that resolves to the SplitIO.SplitView list.
     */
    splits(): SplitViewsAsync,
    /**
     * Get the data of a split in SplitView format.
     * @function split
     * @param {string} featureFlagName The name of the feature flag we want to get info of.
     * @returns {SplitViewAsync} A promise that resolves to the SplitIO.SplitView value.
     */
    split(featureFlagName: string): SplitViewAsync,
  }
}
